{
  "name": "websocket.io",
  "description": "Socket.IO websocket server",
  "version": "0.1.6",
  "contributors": [
    {
      "name": "Guillermo Rauch",
      "email": "rauchg@gmail.com"
    },
    {
      "name": "Einar Otto Stangvik",
      "email": "einaros@gmail.com"
    },
    {
      "name": "Arnout Kazemier",
      "email": "info@3rd-eden.com"
    }
  ],
  "dependencies": {
    "ws": "0.4.x"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "colors": "*",
    "benchmark": "0.2.2"
  },
  "main": "lib/websocket.io",
  "engines": {
    "node": ">=0.4.0"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "WebSocket.IO\n============\n\n[![Build Status](https://secure.travis-ci.org/learnboost/websocket.io.png)](http://travis-ci.org/learnboost/websocket.io)\n\nWebSocket.IO is an abstraction of the websocket server previously used by Socket.IO.\nIt has the broadest support for websocket protocol/specifications and an API that\nallows for interoperability with higher-level frameworks such as\n[Engine](http://github.com/learnboost/engine.io),\n[Socket.IO](http://github.com/learnboost/socket.io)'s realtime core.\n\n## Features\n\n- Fast\n- Minimalistic\n  - Offers an integration API for higher-level impls to handle authorization,\n    routing, etc\n- Widest support of protocols\n  - Draft-75\n  - Draft-76\n  - Draft-00\n  - Protocol version 7\n  - Protocol version 8\n  - Protocol version 13\n- Written for Node 0.6\n\n## How to use\n\n### Server\n\n#### (A) Listening on a port\n\n```js\nvar ws = require('websocket.io')\n  , server = ws.listen(3000)\n\nserver.on('connection', function (socket) {\n  socket.on('message', function () { });\n  socket.on('close', function () { });\n});\n```\n\n#### (B) Intercepting WebSocket requests for a http.Server\n\n```js\nvar ws = require('websocket.io')\n  , http = require('http').createServer().listen(3000)\n  , server = ws.attach(http)\n\nserver.on('connection', function (socket) {\n  socket.on('message', function () { });\n  socket.on('close', function () { });\n});\n```\n\n#### (C) Passing in requests\n\n```js\nvar ws = require('websocket.io')\n  , server = new ws.Server()\n\nserver.on('connection', function (socket) {\n  socket.send('hi');\n});\n\n// â€¦\nhttpServer.on('upgrade', function (req, socket, head) {\n  server.handleUpgrade(req, socket, head);\n});\n```\n\n### Client-side example\n\n```js\nvar ws = new WebSocket(\"ws://host:port/\");        \n\nsocket.onopen = function() {\n //do something when connection estabilished\n};\n\nsocket.onmessage = function(message) {\n //do something when message arrives\n};\n\nsocket.onclose = function() {\n //do something when connection close\n};\n\n```\n\n## API\n\n<hr><br>\n\n### Top-level\n\nThese are exposed by `require('websocket.io')`\n\n#### Properties\n\n- `version` _(String)_: protocol revision number\n- `Server` _(Function)_: server constructor\n- `Socket` _(Function)_: client constructor\n- `Logger` _(Function)_: logger constructor\n- `protocols` _(Object)_: hash of different `Socket` constructors for each protocol\n    - `drafts` _(Function)_: client for drafts 75/76/00\n    - `7` _(Function)_: client for protocol 7\n    - `8` _(Function)_: client for protocol 8\n    - `13` _(Function)_: client for protocol 13\n\n#### Methods\n\n- `listen`\n    - Creates an `http.Server` which listens on the given port and attaches WS\n      to it. It returns `501 Not Implemented` for regular http requests.\n    - **Parameters**\n      - `Number`: port to listen on.\n      - `Function`: callback for `listen`. The options object can be supplied\n        as second parameter as well.\n      - `Object`: optional, options object. See `Server` constructor API for\n        options.\n    - **Returns** `Server`\n- `attach`\n    - Captures `upgrade` requests for a `http.Server`. In other words, makes\n      a regular http.Server websocket-compatible.\n    - **Parameters**\n      - `http.Server`: server to attach to.\n      - `Object`: optional, options object. See `Server` constructor API for\n        options.\n    - **Returns** `Server`\n\n<hr><br>\n\n### Server\n\n#### Events\n\n- `connection`\n    - Fired when a new connection is established.\n    - **Arguments**\n      - `Socket`: a Socket object\n\n#### Methods\n\n- **constructor**\n    - Initializes the server\n    - **Parameters**\n      - `Object`: optional, options object\n    - **Options**\n      - `logger` (`Object`/`Boolean`): logger object. If you want to customize the\n        logger options, please supply a new `Logger` object (see API below). If you\n        want to enable it, set this option to `true`.\n- ``handleUpgrade``\n    - Handles an incoming request that triggered an `upgrade` event\n    - **Parameters**\n      - `http.Request`: http request\n      - `http.Stream`: request socket\n      - `Buffer`: stream head\n    - **Returns** `Server`\n\n<hr><br>\n\n### Socket\n\n#### Events\n\n- `message`\n    - Fired when data is received.\n    - **Arguments**\n      - `String`: data\n- `close`\n    - Fired when the connection is closed.\n\n#### Properties\n\n- `open`\n    - Whether the socket is open for writing\n- `req`\n    - `http.ServerRequest` that originated the connection\n- `socket`\n    - `net.Stream` that originated the connection\n\n#### Methods\n\n- ``send``\n    - Sends data to the socket.\n    - **Parameters**\n      - `String`: data to send\n    - **Returns** `Socket`\n- ``close``\n    - Closes the socket.\n    - **Returns** `Socket`\n- ``destroy``\n    - Forcibly closes the socket.\n    - **Returns** `Socket`\n\n<hr><br>\n\n### Logger\n\n#### Methods\n\n- **constructor**\n    - Initializes the logger\n    - **Parameters**\n      - `Object`: optional, options object\n    - **Options**\n      - `enabled` (`Boolean`): whether to output to the console (`false`).\n      - `log level` (`Number`): log level (`3`).\n      - `colors` (`Boolean`): whether to output colors (`true`).\n\n#### Methods\n\n- **log**\n- **debug**\n- **warn**\n- **info**\n\n## Support\n\nThe support channels for `websocket.io` are the same as `socket.io`:\n\n  * irc.freenode.net **#socket.io**\n  * [Google Groups](http://groups.google.com/group/socket_io)\n  * [Website](http://socket.io)\n\n## Development\n\nTo contribute patches, run tests or benchmarks, make sure to clone the\nrepository:\n\n```\ngit clone git://github.com/LearnBoost/websocket.io.git\n```\n\nThen:\n\n```\ncd websocket.io\nnpm install\n```\n\n## Tests\n\n```\n$ make test\n```\n## Benchmarks\n\n```\n$ make bench\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 Guillermo Rauch &lt;guillermo@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "websocket.io@0.1.6",
  "dist": {
    "shasum": "f398f70cfe357cfcc5d1e33e76ebdbafcdfc87e6"
  },
  "_from": "websocket.io@0.1.6"
}
